{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"\ud83c\udfae Python for Control Systems","text":"<p>Welcome to Python4Control - your comprehensive guide to mastering control systems with Python! \ud83d\ude80</p>"},{"location":"index.html#overview","title":"Overview","text":"<p>This documentation provides a structured approach to learning control systems using Python, perfect for students, engineers, and hobbyists. Our tutorials combine theoretical concepts with practical implementations, making complex control theory accessible and applicable.</p>"},{"location":"index.html#available-tutorials","title":"\ud83d\udcda Available Tutorials","text":"<ul> <li> <p> Introduction to Control Systems</p> <p>Learn the fundamentals of control systems and Python implementation.</p> <p> Go to tutorial</p> </li> <li> <p> Control Functions</p> <p>Master essential control system functions and their Python implementations.</p> <p> Go to tutorial</p> </li> </ul>"},{"location":"index.html#what-youll-learn","title":"\ud83c\udfaf What You'll Learn","text":"<ul> <li> <p> System Analysis</p> <ul> <li>Transfer function manipulation</li> <li>State-space representations</li> <li>System response analysis</li> </ul> </li> <li> <p> Controller Design</p> <ul> <li>PID controller tuning</li> <li>State feedback control</li> <li>Observer design</li> </ul> </li> <li> <p> Visualization</p> <ul> <li>Time-domain responses</li> <li>Frequency responses</li> <li>Root locus plots</li> </ul> </li> <li> <p> Applications</p> <ul> <li>Real-world examples</li> <li>Practical implementations</li> <li>Case studies</li> </ul> </li> </ul>"},{"location":"index.html#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ul> <li> <p> Installation</p> <pre><code>git clone https://github.com/Hmustf/python4control.git\ncd python4control\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install -r requirements.txt\n</code></pre> </li> <li> <p> Prerequisites</p> <ul> <li>Python 3.8+</li> <li>Basic control theory knowledge</li> <li>Familiarity with Python programming</li> </ul> </li> </ul>"},{"location":"index.html#useful-resources","title":"\ud83d\udd17 Useful Resources","text":"<ul> <li> <p> Libraries</p> <ul> <li>Python Control Systems Library</li> <li>NumPy Documentation</li> <li>Matplotlib Documentation</li> </ul> </li> <li> <p> Support</p> <ul> <li>GitHub Repository</li> <li>Report Issues</li> <li>Contributing Guidelines</li> </ul> </li> </ul>"},{"location":"index.html#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Whether it's adding new tutorials, improving existing examples, fixing bugs, or enhancing documentation, your help is appreciated. Check our Contributing Guidelines to get started.</p>"},{"location":"index.html#documentation","title":"\ud83d\udcd6 Documentation","text":"<p>Each tutorial contains: - Detailed README with theory explanations - Well-commented Python code - Example outputs and plots - Practice exercises</p>"},{"location":"index.html#license","title":"\ud83d\udcdd License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"index.html#useful-links","title":"\ud83d\udd17 Useful Links","text":"<ul> <li>Python Control Systems Library</li> <li>NumPy Documentation</li> <li>Matplotlib Documentation </li> </ul>"},{"location":"index.html#welcome-to-python4control","title":"Welcome to Python4Control","text":"<p>Welcome to the Python for Control Systems course. This documentation provides comprehensive materials for learning control systems using Python.</p>"},{"location":"index.html#course-structure","title":"Course Structure","text":""},{"location":"index.html#control-system-design-with-python","title":"Control System Design with Python","text":"<ul> <li>Introduction to Control Systems</li> <li>Topic A: Fundamentals</li> <li>Topic B: Advanced Concepts</li> </ul>"},{"location":"index.html#getting-started_1","title":"Getting Started","text":"<p>Choose a topic from the navigation menu to begin your learning journey.</p>"},{"location":"index.html#what-youll-learn_1","title":"\ud83c\udfaf What You'll Learn","text":"<ul> <li>Control system analysis using Python</li> <li>Transfer function manipulation</li> <li>System response visualization</li> <li>Controller design and tuning</li> <li>Real-world control applications</li> </ul>"},{"location":"index.html#prerequisites","title":"\ud83d\udcda Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>Basic understanding of control systems theory</li> <li>Basic Python programming knowledge </li> </ul>"},{"location":"control-design/01_intro.html","title":"Control System Design with Python","text":""},{"location":"control-design/01_intro.html#introduction-to-python-for-control-systems","title":"Introduction to Python for Control Systems","text":"<p>Python is a versatile programming language that's excellent for control systems engineering. We'll use several key libraries: - <code>numpy</code> for numerical computations - <code>control</code> for control systems analysis - <code>matplotlib</code> for plotting</p>"},{"location":"control-design/01_intro.html#basic-python-concepts","title":"Basic Python Concepts","text":"<p>Python's syntax is clean and readable. Here are some basic examples:</p> <p><pre><code># Basic variable assignments\nx = 123.3\ntext = \"Some text\"\nflag = True\nprint(f\"x = {x}, text = {text}, flag = {flag}\")\n\n# Lists (similar to arrays in other languages)\nx = [1, 2, 3, 4]\nprint(\"List x:\", x)\n\n# Using NumPy for numerical arrays\nimport numpy as np\nx = np.array([1, 2, 3, 4])\nprint(\"NumPy array x:\", x)\n\n# Creating arrays of zeros and ones\nx = np.zeros(4)\ny = np.ones((2, 2))\nprint(\"Array of zeros:\", x)\nprint(\"2x2 array of ones:\\n\", y)\n</code></pre> <pre><code>Output:\nx = 123.3, text = Some text, flag = True\nList x: [1, 2, 3, 4]\nNumPy array x: [1 2 3 4]\nArray of zeros: [0. 0. 0. 0.]\n2x2 array of ones:\n [[1. 1.]\n  [1. 1.]]\n</code></pre></p>"},{"location":"control-design/01_intro.html#functions-in-python","title":"Functions in Python","text":"<p>Functions are defined using the <code>def</code> keyword:</p> <p><pre><code>def square(x):\n    return x * x\n\nx = 2\ny = square(x)\nprint(f\"The square of {x} is {y}\")\n\n# Let's try with a list of numbers\nnumbers = [1, 2, 3, 4]\nsquares = [square(n) for n in numbers]\nprint(f\"The squares of {numbers} are {squares}\")\n</code></pre> <pre><code>Output:\nThe square of 2 is 4\nThe squares of [1, 2, 3, 4] are [1, 4, 9, 16]\n</code></pre></p>"},{"location":"control-design/01_intro.html#control-systems-with-python-control","title":"Control Systems with Python Control","text":"<p>The <code>control</code> library provides powerful tools for control systems analysis. Let's look at some basic examples:</p>"},{"location":"control-design/01_intro.html#single-step-response","title":"Single Step Response","text":"<p>Here's how to create a transfer function and plot its step response:</p> <p><pre><code>import control\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a transfer function G(s) = (s + 2)/(s^2 + 2s + 1)\ns = control.TransferFunction.s\nG = control.TransferFunction([1, 2], [1, 2, 1])\n\n# Print transfer function\nprint(\"Transfer function G(s):\")\nprint(G)\n\n# Generate and plot step response\nt, y = control.step_response(G)\nplt.figure()  # Using default size\nplt.plot(t, y, linewidth=2)\nplt.grid(True)\nplt.title('Step Response')\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.show()\n</code></pre> <pre><code>Output:\nTransfer function G(s):\n       s + 2\n-------------------\ns^2 + 2 s + 1\n</code></pre></p> <p> </p>"},{"location":"control-design/01_intro.html#multiple-step-responses","title":"Multiple Step Responses","text":"<p>We can also compare step responses of different systems:</p> <p><pre><code>import control\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create figure\nplt.figure()  # Using default size\nt = np.linspace(0, 5, 500)\n\n# Generate step responses for different systems\nfor a in range(1, 6):\n    # Create transfer function G(s) = a/(s + a)\n    G = control.TransferFunction([a], [1, a])\n    print(f\"\\nTransfer function for a={a}:\")\n    print(G)\n\n    # Get and plot step response\n    t, y = control.step_response(G, t)\n    plt.plot(t, y, linewidth=2, label=f'a={a}')\n\nplt.grid(True)\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.title('Step Responses for Different Systems')\nplt.legend(loc='lower right')\nplt.show()\n</code></pre> <pre><code>Output:\nTransfer function for a=1:\n  1\n-----\ns + 1\n\nTransfer function for a=2:\n  2\n-----\ns + 2\n\nTransfer function for a=3:\n  3\n-----\ns + 3\n\nTransfer function for a=4:\n  4\n-----\ns + 4\n\nTransfer function for a=5:\n  5\n-----\ns + 5\n</code></pre></p> <p> </p> <p>This example shows how to: 1. Create transfer functions with different parameters 2. Generate step responses 3. Plot multiple responses on the same graph 4. Add proper labels and legends</p> <p>The Python ecosystem provides these powerful tools for control systems analysis, making it an excellent choice for control system design and analysis.</p>"},{"location":"control-design/02_control_func.html","title":"Control System Design - Week 1","text":""},{"location":"control-design/02_control_func.html#root-locus-plot","title":"Root Locus Plot","text":"<p>An example transfer function is given:</p> \\[ G(s) = \\frac{1}{(s+1)(s+2)(s+3)} \\] <p>Using Python's control library:</p> <pre><code>import control\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create transfer function G(s) = 1/((s+1)(s+2)(s+3))\nG = control.TransferFunction([1], [1, 6, 11, 6])\n\n# Generate root locus plot\nplt.figure()\ncontrol.root_locus(G)\nplt.title('Root Locus Plot')\nplt.grid(True)\nplt.show()\n</code></pre> <p> </p>"},{"location":"control-design/02_control_func.html#bode-plot-for-a-band-pass-filter","title":"Bode Plot for a Band-Pass Filter","text":"<p>Given the band-pass filter:</p> \\[ G(s) = \\frac{1}{Q w_0^2} \\frac{1}{s^2 + \\frac{w_0}{Q} s + w_0^2} \\] <p>Using Python:</p> <pre><code>import control\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define parameters\nf0 = 100  # Center frequency in Hz\ndf = 10   # Bandwidth in Hz\nw0 = 2 * np.pi * f0\nfl = f0 - df\nfh = f0 + df\nQ = f0 / (fh - fl)\n\n# Create transfer function\nnum = [w0**2 / Q]\nden = [1, w0/Q, w0**2]\nsystem = control.TransferFunction(num, den)\n\n# Generate Bode plot\nplt.figure(figsize=(8, 12))\ncontrol.bode_plot(system, dB=True)\nplt.show()\n</code></pre> <p> </p>"},{"location":"control-design/02_control_func.html#impulse-step-and-ramp-responses","title":"Impulse, Step, and Ramp Responses","text":"<p>For a given transfer function:</p> \\[ G(s) = \\frac{1}{s+1} \\] <p>Calculate the impulse, step, and ramp responses:</p> <pre><code>from scipy.signal import lti, step, impulse\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define transfer function G(s) = 1/(s+1)\nnum = [1]\nden = [1, 1]\nsystem = lti(num, den)\n\n# Time vector\nt = np.linspace(0, 10, 500)\n\n# Get responses\nt_step, y_step = step(system, T=t)\nt_impulse, y_impulse = impulse(system, T=t)\nramp_input = t\n_, y_ramp, _ = system.output(ramp_input, T=t)\n\n# Plot responses\nplt.figure(figsize=(10, 12))\n\nplt.subplot(3, 1, 1)\nplt.plot(t_impulse, y_impulse, label='Impulse Response')\nplt.grid(True)\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.title('Impulse Response')\n\nplt.subplot(3, 1, 2)\nplt.plot(t_step, y_step, label='Step Response', color='green')\nplt.grid(True)\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.title('Step Response')\n\nplt.subplot(3, 1, 3)\nplt.plot(t, y_ramp, label='Ramp Response', color='red')\nplt.grid(True)\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.title('Ramp Response')\n\nplt.tight_layout()\nplt.show()\n</code></pre> <p> </p>"}]}