{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfae Python for Control Systems","text":"<p>A comprehensive collection of tutorials and examples demonstrating control system analysis and design using Python. Perfect for students, engineers, and hobbyists interested in control systems.</p>"},{"location":"#what-youll-learn","title":"\ud83c\udfaf What You'll Learn","text":"<ul> <li>Control system analysis using Python</li> <li>Transfer function manipulation</li> <li>System response visualization</li> <li>Controller design and tuning</li> <li>Real-world control applications</li> </ul>"},{"location":"#available-tutorials","title":"\ud83d\udcda Available Tutorials","text":""},{"location":"#tutorial-0-python-basics-for-control","title":"Tutorial 0: Python Basics for Control","text":"<ul> <li>Basic Python concepts for control systems</li> <li>Symbolic mathematics with SymPy</li> <li>Transfer function analysis</li> <li>System response visualization</li> <li>Step response plotting</li> </ul>"},{"location":"#prerequisites","title":"\ud83d\udd27 Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>Basic understanding of control systems theory</li> <li>Basic Python programming knowledge</li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ol> <li> <p>Clone this repository: <pre><code>git clone https://github.com/Hmustf/python4control.git\ncd python4control\n</code></pre></p> </li> <li> <p>Create a virtual environment: <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows use: .venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install required packages: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> </ol>"},{"location":"#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tutorials/\n    \u2514\u2500\u2500 tutorial-0/\n        \u251c\u2500\u2500 README.md\n        \u251c\u2500\u2500 basic_examples.py\n        \u251c\u2500\u2500 symbolic_example.py\n        \u251c\u2500\u2500 control_examples.py\n        \u2514\u2500\u2500 plots/\n</code></pre>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Here's how you can help: - Add new tutorials - Improve existing examples - Fix bugs or typos - Enhance documentation - Add more real-world examples</p>"},{"location":"#documentation","title":"\ud83d\udcd6 Documentation","text":"<p>Each tutorial contains: - Detailed README with theory explanations - Well-commented Python code - Example outputs and plots - Practice exercises</p>"},{"location":"#license","title":"\ud83d\udcdd License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#useful-links","title":"\ud83d\udd17 Useful Links","text":"<ul> <li>Python Control Systems Library</li> <li>NumPy Documentation</li> <li>Matplotlib Documentation </li> </ul>"},{"location":"#welcome-to-python4control","title":"Welcome to Python4Control","text":"<p>Welcome to the Python for Control Systems course. This documentation provides comprehensive materials for learning control systems using Python.</p>"},{"location":"#course-structure","title":"Course Structure","text":""},{"location":"#control-system-design-with-python","title":"Control System Design with Python","text":"<ul> <li>Introduction to Control Systems</li> <li>Topic A: Fundamentals</li> <li>Topic B: Advanced Concepts</li> </ul>"},{"location":"#getting-started_1","title":"Getting Started","text":"<p>Choose a topic from the navigation menu to begin your learning journey.</p>"},{"location":"#what-youll-learn_1","title":"\ud83c\udfaf What You'll Learn","text":"<ul> <li>Control system analysis using Python</li> <li>Transfer function manipulation</li> <li>System response visualization</li> <li>Controller design and tuning</li> <li>Real-world control applications</li> </ul>"},{"location":"#prerequisites_1","title":"\ud83d\udcda Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>Basic understanding of control systems theory</li> <li>Basic Python programming knowledge </li> </ul>"},{"location":"course1/01_intro/","title":"Control System Design with Python","text":""},{"location":"course1/01_intro/#introduction-to-python-for-control-systems","title":"Introduction to Python for Control Systems","text":"<p>Python is a versatile programming language that's excellent for control systems engineering. We'll use several key libraries: - <code>numpy</code> for numerical computations - <code>control</code> for control systems analysis - <code>matplotlib</code> for plotting</p>"},{"location":"course1/01_intro/#basic-python-concepts","title":"Basic Python Concepts","text":"<p>Python's syntax is clean and readable. Here are some basic examples:</p> <p><pre><code># Basic variable assignments\nx = 123.3\ntext = \"Some text\"\nflag = True\nprint(f\"x = {x}, text = {text}, flag = {flag}\")\n\n# Lists (similar to arrays in other languages)\nx = [1, 2, 3, 4]\nprint(\"List x:\", x)\n\n# Using NumPy for numerical arrays\nimport numpy as np\nx = np.array([1, 2, 3, 4])\nprint(\"NumPy array x:\", x)\n\n# Creating arrays of zeros and ones\nx = np.zeros(4)\ny = np.ones((2, 2))\nprint(\"Array of zeros:\", x)\nprint(\"2x2 array of ones:\\n\", y)\n</code></pre> <pre><code>Output:\nx = 123.3, text = Some text, flag = True\nList x: [1, 2, 3, 4]\nNumPy array x: [1 2 3 4]\nArray of zeros: [0. 0. 0. 0.]\n2x2 array of ones:\n [[1. 1.]\n  [1. 1.]]\n</code></pre></p>"},{"location":"course1/01_intro/#functions-in-python","title":"Functions in Python","text":"<p>Functions are defined using the <code>def</code> keyword:</p> <p><pre><code>def square(x):\n    return x * x\n\nx = 2\ny = square(x)\nprint(f\"The square of {x} is {y}\")\n\n# Let's try with a list of numbers\nnumbers = [1, 2, 3, 4]\nsquares = [square(n) for n in numbers]\nprint(f\"The squares of {numbers} are {squares}\")\n</code></pre> <pre><code>Output:\nThe square of 2 is 4\nThe squares of [1, 2, 3, 4] are [1, 4, 9, 16]\n</code></pre></p>"},{"location":"course1/01_intro/#control-systems-with-python-control","title":"Control Systems with Python Control","text":"<p>The <code>control</code> library provides powerful tools for control systems analysis. Let's look at some basic examples:</p>"},{"location":"course1/01_intro/#single-step-response","title":"Single Step Response","text":"<p>Here's how to create a transfer function and plot its step response:</p> <p><pre><code>import control\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a transfer function G(s) = (s + 2)/(s^2 + 2s + 1)\ns = control.TransferFunction.s\nG = control.TransferFunction([1, 2], [1, 2, 1])\n\n# Print transfer function\nprint(\"Transfer function G(s):\")\nprint(G)\n\n# Generate and plot step response\nt, y = control.step_response(G)\nplt.figure()  # Using default size\nplt.plot(t, y, linewidth=2)\nplt.grid(True)\nplt.title('Step Response')\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.show()\n</code></pre> <pre><code>Output:\nTransfer function G(s):\n       s + 2\n-------------------\ns^2 + 2 s + 1\n</code></pre></p> <p> </p>"},{"location":"course1/01_intro/#multiple-step-responses","title":"Multiple Step Responses","text":"<p>We can also compare step responses of different systems:</p> <p><pre><code>import control\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create figure\nplt.figure()  # Using default size\nt = np.linspace(0, 5, 500)\n\n# Generate step responses for different systems\nfor a in range(1, 6):\n    # Create transfer function G(s) = a/(s + a)\n    G = control.TransferFunction([a], [1, a])\n    print(f\"\\nTransfer function for a={a}:\")\n    print(G)\n\n    # Get and plot step response\n    t, y = control.step_response(G, t)\n    plt.plot(t, y, linewidth=2, label=f'a={a}')\n\nplt.grid(True)\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.title('Step Responses for Different Systems')\nplt.legend(loc='lower right')\nplt.show()\n</code></pre> <pre><code>Output:\nTransfer function for a=1:\n  1\n-----\ns + 1\n\nTransfer function for a=2:\n  2\n-----\ns + 2\n\nTransfer function for a=3:\n  3\n-----\ns + 3\n\nTransfer function for a=4:\n  4\n-----\ns + 4\n\nTransfer function for a=5:\n  5\n-----\ns + 5\n</code></pre></p> <p> </p> <p>This example shows how to: 1. Create transfer functions with different parameters 2. Generate step responses 3. Plot multiple responses on the same graph 4. Add proper labels and legends</p> <p>The Python ecosystem provides these powerful tools for control systems analysis, making it an excellent choice for control system design and analysis.</p>"},{"location":"course1/02_control_func/","title":"Control System Design - Week 1","text":""},{"location":"course1/02_control_func/#root-locus-plot","title":"Root Locus Plot","text":"<p>An example transfer function is given:</p> \\[ G(s) = \\frac{1}{(s+1)(s+2)(s+3)} \\] <p>Using symbolic calculations:</p> <pre><code>from sympy import symbols, solve, simplify\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the symbolic variables\ns, k = symbols('s k')\n\n# Define the transfer function\nGs = 1 / ((s + 1) * (s + 2) * (s + 3))\n\n# Closed-loop transfer function\nTs = k * Gs / (1 + k * Gs)\n\n# Numerator and denominator\nnumerator, denominator = simplify(Ts).as_numer_denom()\n\n# Plot the root locus\nreal_parts = []\nimag_parts = []\n\nk_values = np.linspace(0, 20, 100)\n\nfor kv in k_values:\n    d_subs = denominator.subs(k, kv)\n    poles = solve(d_subs, s)\n    for pole in poles:\n        real_parts.append(pole.as_real_imag()[0])\n        imag_parts.append(pole.as_real_imag()[1])\n\nplt.figure(figsize=(8, 6))\nplt.scatter(real_parts, imag_parts, color='blue', label='Poles')\nplt.axhline(0, color='black', linestyle='--')\nplt.axvline(0, color='black', linestyle='--')\nplt.xlabel('Real Part')\nplt.ylabel('Imaginary Part')\nplt.title('Root Locus Plot')\nplt.legend()\nplt.grid()\nplt.show()\n</code></pre> <p> </p>"},{"location":"course1/02_control_func/#bode-plot-for-a-band-pass-filter","title":"Bode Plot for a Band-Pass Filter","text":"<p>Given the band-pass filter:</p> \\[ G(s) = \\frac{1}{Q w_0^2} \\frac{1}{s^2 + \\frac{w_0}{Q} s + w_0^2} \\] <p>Using Python:</p> <pre><code>from sympy import I, pi, lambdify\n\n# Define parameters\ndf = 10\nf0 = 100\nw0 = 2 * pi * f0\nfl = f0 - df\nfh = f0 + df\nQ = f0 / (fh - fl)\n\n# Define the transfer function\nGs = (1 / Q) * w0**2 / (s**2 + (w0 / Q) * s + w0**2)\n\n# Substitute s with jw\nw = symbols('w')\nGjw = Gs.subs(s, I * w)\n\n# Create frequency values\nw_values = np.linspace(0, 1000, 1000)\nGjw_func = lambdify(w, Gjw, 'numpy')\n\n# Calculate gain and phase\ngain = np.abs(Gjw_func(w_values))\nphase = np.angle(Gjw_func(w_values), deg=True)\n\n# Plot Bode Plot\nplt.figure(figsize=(8, 12))\n\nplt.subplot(2, 1, 1)\nplt.plot(w_values / (2 * np.pi), 20 * np.log10(gain), label='Gain')\nplt.xscale('log')\nplt.grid(True, which=\"both\", linestyle='--')\nplt.xlabel('Frequency (Hz)')\nplt.ylabel('Gain (dB)')\nplt.title('Bode Plot - Gain')\n\nplt.subplot(2, 1, 2)\nplt.plot(w_values / (2 * np.pi), phase, label='Phase', color='orange')\nplt.xscale('log')\nplt.grid(True, which=\"both\", linestyle='--')\nplt.xlabel('Frequency (Hz)')\nplt.ylabel('Phase (degrees)')\nplt.title('Bode Plot - Phase')\n\nplt.tight_layout()\nplt.show()\n</code></pre> <p> </p>"},{"location":"course1/02_control_func/#impulse-step-and-ramp-responses","title":"Impulse, Step, and Ramp Responses","text":"<p>For a given transfer function:</p> \\[ G(s) = \\frac{1}{s+1} \\] <p>Calculate the impulse, step, and ramp responses:</p> <pre><code>from scipy.signal import lti, step, impulse\n\n# Define transfer function numerator and denominator\nnum = [1]\nden = [1, 1]\n\n# Define LTI system\nsystem = lti(num, den)\n\n# Time vector\nt = np.linspace(0, 10, 500)\n\n# Step response\nt_step, y_step = step(system, T=t)\n\n# Impulse response\nt_impulse, y_impulse = impulse(system, T=t)\n\n# Ramp response\nramp_input = t\n_, y_ramp, _ = lti(num, den).output(ramp_input, T=t)\n\n# Plot responses\nplt.figure(figsize=(10, 8))\n\nplt.subplot(3, 1, 1)\nplt.plot(t_impulse, y_impulse, label='Impulse Response')\nplt.grid(True)\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.title('Impulse Response')\n\nplt.subplot(3, 1, 2)\nplt.plot(t_step, y_step, label='Step Response', color='green')\nplt.grid(True)\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.title('Step Response')\n\nplt.subplot(3, 1, 3)\nplt.plot(t, y_ramp, label='Ramp Response', color='red')\nplt.grid(True)\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.title('Ramp Response')\n\nplt.tight_layout()\nplt.show()\n</code></pre> <p> </p>"},{"location":"tutorials/tutorial-0/","title":"\ud83d\udc0d Control System Design with Python","text":""},{"location":"tutorials/tutorial-0/#introduction-to-python-for-control-systems","title":"Introduction to Python for Control Systems","text":"<p>Python is a versatile programming language widely used in scientific computing and engineering. With libraries like NumPy, Control, and Matplotlib, it provides powerful tools for control system analysis and design.</p> <p>This tutorial will guide you through: - Basic Python concepts for control systems - Symbolic mathematics with SymPy - Transfer function analysis - System response visualization</p> <p>\ud83d\udca1 All code examples can be found in the following files: - basic_examples.py - symbolic_example.py - control_examples.py</p>"},{"location":"tutorials/tutorial-0/#basic-python-concepts","title":"\ud83d\udd27 Basic Python Concepts","text":"<p>Variables in Python are dynamically typed and easy to work with:</p> <p><pre><code>x = 123.3        # float\nx = \"Some text\"  # string\nx = True         # boolean\n</code></pre> Output: <pre><code>Float: 123.3\nString: Some text\nBoolean: True\n</code></pre></p> <p>Engineers often work with signals (arrays), which are handled efficiently using NumPy:</p> <p><pre><code>import numpy as np\n\nx = np.array([1, 2, 3, 4])  # Create a numpy array\n</code></pre> Output: <pre><code>Basic array: [1 2 3 4]\n</code></pre></p> <p>Arrays can be created from individual variables:</p> <p><pre><code>x1, x2, x3, x4 = 1, 2, 3, 4\nx = np.array([x1, x2, x3, x4])\n</code></pre> Output: <pre><code>Array from variables: [1 2 3 4]\n</code></pre></p> <p>NumPy provides convenient functions for creating arrays:</p> <p><pre><code>x = np.zeros(4)          # Array of zeros\ny = np.ones((2, 2))      # 2x2 matrix of ones\nz = np.linspace(0, 1, 5) # 5 evenly spaced points from 0 to 1\n</code></pre> Output: <pre><code>Zeros array: [0. 0. 0. 0.]\nOnes matrix:\n[[1. 1.]\n [1. 1.]]\nLinspace array: [0.   0.25 0.5  0.75 1.  ]\n</code></pre></p>"},{"location":"tutorials/tutorial-0/#control-flow-and-functions","title":"\ud83d\udd04 Control Flow and Functions","text":"<p>Python's clean syntax makes control flow and functions intuitive:</p> <p><pre><code>def square(x):\n    \"\"\"Square a number.\"\"\"\n    return x * x\n\nx = 2\ny = square(x)  # y = 4\n</code></pre> Output: <pre><code>Square of 2 is 4\n</code></pre></p>"},{"location":"tutorials/tutorial-0/#symbolic-mathematics-with-sympy","title":"\u2797 Symbolic Mathematics with SymPy","text":"<p>SymPy enables symbolic mathematics, which is crucial for control system analysis. For example, we can solve the quadratic equation:</p> <p>\\(ax^2 + bx + c = 0\\)</p> <p>Or simplify trigonometric identities like:</p> <p>\\(\\sin^2(x) + \\cos^2(x) = 1\\)</p> <p>Here's how to do it in code:</p> <p><pre><code>from sympy import symbols, solve, simplify, cos, sin\n\n# Define symbolic variables\nx, y = symbols('x y')\n\n# Work with polynomials\npol = x**2 + 2*x + 1  # Represents (x + 1)\u00b2\ncoeffs = pol.as_poly().all_coeffs()\n\n# Solve equations\nsolution = solve(pol, x)\n\n# Simplify expressions\nresult = simplify(cos(x)**2 + sin(x)**2)\n</code></pre> Output: <pre><code>--- Symbolic Mathematics Examples ---\nDefined symbols: x y\n\nPolynomial: x**2 + 2*x + 1\nCoefficients: [1, 2, 1]\n\nSolutions to x**2 + 2*x + 1 = 0:\n[-1]\n\nSimplifying sin(x)**2 + cos(x)**2\nResult: 1\n</code></pre></p>"},{"location":"tutorials/tutorial-0/#control-systems-with-python-control","title":"\ud83c\udf9b\ufe0f Control Systems with Python Control","text":"<p>The <code>control</code> library lets us work with transfer functions and analyze system responses. For example, consider a second-order system:</p> <p>\\(G(s) = \\frac{1}{s^2 + 2s + 1}\\)</p> <pre><code>import control\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create transfer function\nnum = [1]\nden = [1, 2, 1]\nG = control.TransferFunction(num, den)\n\n# Get system information\nzeros, poles, gain = control.zero_pole_gain(G)\n\n# Plot step response\nt = np.linspace(0, 10, 1000)\nt, y = control.step_response(G, t)\nplt.plot(t, y)\nplt.grid(True)\nplt.xlabel('Time [s]')\nplt.ylabel('Amplitude')\nplt.title('Step Response')\nplt.show()\n</code></pre> <p>The resulting step response plot:</p> <p></p>"},{"location":"tutorials/tutorial-0/#first-order-system-comparison","title":"\ud83d\udcca First-Order System Comparison","text":"<p>Let's compare first-order systems with different time constants. The transfer function form is:</p> <p>\\(G(s) = \\frac{a}{s + a}\\)</p> <p>where \\(a\\) is the inverse of the time constant \\(\\tau = \\frac{1}{a}\\).</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom control import TransferFunction, step_response\n\nplt.figure(figsize=(10, 6))\nt = np.linspace(0, 5, 1000)\n\nfor a in range(1, 6):\n    G = TransferFunction([a], [1, a])\n    t, y = step_response(G, t)\n    plt.plot(t, y, linewidth=2, label=f'a = {a}')\n\nplt.grid(True)\nplt.xlabel('Time [s]')\nplt.ylabel('Amplitude')\nplt.title('Step Responses of First-Order Systems')\nplt.legend()\nplt.show()\n</code></pre> <p>The resulting comparison plot:</p> <p></p> <p>This tutorial demonstrates how Python can be used effectively for control system analysis and design. The combination of NumPy for numerical computations, Control for system analysis, and Matplotlib for visualization makes Python a powerful tool for control engineering. </p> <p>\ud83d\udcda Further Reading: - Python Control Systems Library Documentation - NumPy Documentation - SymPy Tutorial </p>"}]}